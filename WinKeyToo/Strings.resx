<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllDeviceMappingsViewModel_DisplayName" xml:space="preserve">
    <value>All Device Mappings</value>
    <comment>The display name of the AllDeviceMappingsViewModel object</comment>
  </data>
  <data name="DeviceMappingViewModel_DisplayName" xml:space="preserve">
    <value>New Device Mapping</value>
    <comment>The display name of a new DeviceMapping object.</comment>
  </data>
  <data name="DeviceMappingViewModel_Error_MissingAssemblyFileName" xml:space="preserve">
    <value>Action is missing</value>
    <comment>Error message for when a DeviceMapping is missing an action.</comment>
  </data>
  <data name="DeviceMappingViewModel_Error_MissingDeviceInstanceGuid" xml:space="preserve">
    <value>Device selection is missing</value>
    <comment>Error message for when a DeviceMapping is missing a device instance GUID.</comment>
  </data>
  <data name="DeviceMappingViewModel_Error_MissingInputCombination" xml:space="preserve">
    <value>Sequence is missing</value>
    <comment>Error message for when a DeviceMapping has no input combination values.</comment>
  </data>
  <data name="DeviceMappingViewModel_Error_MissingTypeName" xml:space="preserve">
    <value>Action is missing</value>
    <comment>Error message for when a DeviceMapping is missing an action.</comment>
  </data>
  <data name="DeviceMappingViewModel_Exception_CannotSave" xml:space="preserve">
    <value>Cannot save device mapping without all requirements met.</value>
    <comment>The exception message shown if you call Save on an invalid DeviceMappingViewModel object.</comment>
  </data>
  <data name="MainWindowViewModel_Command_CreateNewDeviceMapping" xml:space="preserve">
    <value>Create new mapping</value>
    <comment>Display name for the command that allows the user to create a new mapping.</comment>
  </data>
  <data name="MainWindowViewModel_Command_DoNotRunAtStartup" xml:space="preserve">
    <value>Do not run at startup</value>
    <comment>Display name for the command that uninstalls WinKeyToo in the startup list</comment>
  </data>
  <data name="MainWindowViewModel_Command_RunAtStartup" xml:space="preserve">
    <value>Run at startup</value>
    <comment>Display name for the command that installs WinKeyToo in the startup list</comment>
  </data>
  <data name="MainWindowViewModel_Command_ViewAllDeviceMappings" xml:space="preserve">
    <value>View all mappings</value>
    <comment>Display name for the command that shows all mappings.</comment>
  </data>
  <data name="MainWindowViewModel_DisplayName" xml:space="preserve">
    <value>WinKeyToo</value>
    <comment>Title of the main window</comment>
  </data>
</root>